
package com.reparadoras.caritas.ui.components;


import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.UIManager;
import javax.swing.plaf.ColorUIResource;


public class AbstractJInternalFrame extends JInternalFrame {

    protected  AbstractJInternalFrame jIFParent = null;
    protected AbstractJInternalFrame jIFChild = null;
   
    protected boolean modal = false;
   
    protected boolean centerMe = true;
    // Para el bloqueo de los eventos de ratón
    JComponent glasspane = null;
    protected JDesktopPane jScrollableDesktopPane;
    /**
     * Holds value of property activated.
     */
    private boolean enabled = true;
    private boolean firstDisabled = true;
    private boolean wasClosable = false;
    private boolean wasIconifiable = false;
    private boolean wasMaximizable = false;
    private boolean wasFocusable = false;

    /**
     *  Muestra y selecciona la ventana, no será nunca modal.
     */
    public AbstractJInternalFrame(JDesktopPane jScrollableDesktopPane) {
        this(null, false);
        this.jScrollableDesktopPane = jScrollableDesktopPane;
    }

    /**
     *  Muestra y selecciona la ventana.
     *  @param jIFParent JCicInternalFrame padre de la actual centana
     *  @param modal si es o no modal la ventana
     */
    public AbstractJInternalFrame(AbstractJInternalFrame jIFParent, boolean modal) {
        super("");
        initComponents();
        this.jIFParent = jIFParent;
        this.modal = modal;
        if (this.jIFParent != null) {
            this.jIFParent.setChildIFrame(this);
            if (this.modal) {
                this.disabledParent();
            }
            this.jScrollableDesktopPane = (JDesktopPane) this.jIFParent.getDesktopPane();
        }

        this.setResizable(false);
        this.setClosable(wasClosable);
        this.setIconifiable(wasIconifiable);
        this.setMaximizable(wasMaximizable);
        //this.setFocusable(false);

        // Para el bloqueo de los eventos de ratón
        glasspane = (JComponent) this.getGlassPane();
        glasspane.add(this.jLabelBlockMouseEvents);
    }

    public AbstractJInternalFrame(JWindowParams params) {
        super("");
        initComponents();
        this.modal = params.getModal();
        Object parent = params.getParent();
        if (parent != null && (parent instanceof AbstractJInternalFrame)) {
            this.jIFParent = (AbstractJInternalFrame) params.getParent();
        }
        if (this.jIFParent != null) {
            this.jIFParent.setChildIFrame(this);
            if (this.modal) {
            	this.moveToFront();
                this.disabledParent();
            }
            this.jScrollableDesktopPane = (JDesktopPane) this.jIFParent.getDesktopPane();
        } else {
            this.jScrollableDesktopPane = params.getScrollableDesktopPane();
        }

        this.setResizable(false);
        this.setClosable(false);
        this.setIconifiable(false);
        this.setMaximizable(false);
        //this.setFocusable(false);

        // Para el bloqueo de los eventos de ratón
        glasspane = (JComponent) this.getGlassPane();
        glasspane.add(this.jLabelBlockMouseEvents);

        /*UIManager.put("InternalFrame.activeTitleBackground", new ColorUIResource(242, 28, 10));
        UIManager.put("InternalFrame.activeTitleForeground", new ColorUIResource(250, 250, 250));
        UIManager.put("InternalFrame.borderLight", new ColorUIResource(0, 0, 0));
        
        UIManager.put("ScrollBar.thumb", new ColorUIResource(242, 28, 10));
        UIManager.put("ScrollBar.shadow", new ColorUIResource(250, 250, 250));
        UIManager.put("ScrollBar.thumbHighlight", new ColorUIResource(250, 250, 250));
        javax.swing.plaf.basic.BasicInternalFrameUI ui = new javax.swing.plaf.basic.BasicInternalFrameUI(this);
        this.setUI(ui);*/
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelBlockMouseEvents = new javax.swing.JLabel();

        jLabelBlockMouseEvents.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        jLabelBlockMouseEvents.setToolTipText("Ventana deshabilitada");
        jLabelBlockMouseEvents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelBlockMouseEventsMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelBlockMouseEventsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabelBlockMouseEventsMouseReleased(evt);
            }
        });

        setFont(new java.awt.Font("A Charming Font", 0, 10)); // NOI18N
        setFrameIcon(null);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-311)/2, 400, 311);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        if (this.centerMe) {
            this.centerMe();
        }
        // Se debe ver que se estableció en diseño para esta ventana, para
        // al activarla dejarla como estaba  no añadirle nada que no tuviera
        // al desactivarla.
        //if (this.firstDisabled) {
        this.wasClosable = this.isClosable();
        this.wasIconifiable = this.isIconifiable();
        this.wasMaximizable = this.isMaximizable();
        this.wasFocusable = this.isFocusable();
        firstDisabled = false;
    //}
    }//GEN-LAST:event_formInternalFrameOpened

    private void jLabelBlockMouseEventsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBlockMouseEventsMouseReleased
    }//GEN-LAST:event_jLabelBlockMouseEventsMouseReleased

    private void jLabelBlockMouseEventsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBlockMouseEventsMousePressed
        tryEnableWindow(evt);
    }//GEN-LAST:event_jLabelBlockMouseEventsMousePressed

    private void jLabelBlockMouseEventsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelBlockMouseEventsMouseClicked
    }//GEN-LAST:event_jLabelBlockMouseEventsMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        selectChild();
    }//GEN-LAST:event_formFocusGained

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        selectChild();
    }//GEN-LAST:event_formInternalFrameActivated

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        enabledParent();
    }//GEN-LAST:event_formInternalFrameClosed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelBlockMouseEvents;
    // End of variables declaration//GEN-END:variables

    private void disabledParent() {
        if (this.jIFParent != null) {
            jIFParent.setEnabled(false);
        }
    }

    private void enabledParent() {
        if (this.jIFParent != null) {
            this.jIFParent.setChildIFrame(null);
            this.jIFParent.setEnabled(true);
            try {
                jIFParent.setSelected(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void selectChild() {
        // Se debe seleccionar el hijo cuando exista y sea modal
        if (this.jIFChild != null && this.jIFChild.isModal()) {
            try {
                this.setEnabled(false);
                this.jIFChild.setSelected(true);
                this.getDesktopPane().setSelectedFrame(this.jIFChild);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     *  Se establece la ventana hija, lo que permite que si se intenta seleccionar la padre
     *  se seleccione la hija.
     *  @param JInternalFrame hija
     */
    public void setChildIFrame(AbstractJInternalFrame jIF) {
        this.jIFChild = jIF;
    }

    /**
     *  Para saber si es una ventana modal o no.
     *  @return si es o no modal
     */
    public boolean isModal() {
        return this.modal;
    }

    public boolean isEnabled() {
        return this.enabled;
    }

    public void setEnabled(boolean enabled) {
        if (this.enabled != enabled) {
            if (!enabled) {

                this.disableFrame();
                this.enabled = enabled;
                super.setEnabled(this.enabled);
            } else {
                if (this.jIFChild == null || !this.jIFChild.isModal()) {
                    this.enableFrame();
                    this.enabled = enabled;
                    super.setEnabled(this.enabled);
                }
            }
        }
        this.validate();
    }

    public void setSelected(boolean selected) throws PropertyVetoException {
        if (selected != super.isSelected()) {
            if (this.isEnabled()) {
                if (this.jIFChild == null || !this.jIFChild.isModal()) {
                    if (selected) {
                        deselectAllFrames();
                    }
                    super.setSelected(selected);
                } else {
                    this.selectChild();
                    super.setSelected(false);
                }
            } else {
                super.setSelected(false);
                this.selectChild();
            }
        }
    }

    private void deselectAllFrames() {
        if (this.jScrollableDesktopPane != null) {
            JInternalFrame[] aJIFrames = this.jScrollableDesktopPane.getAllFrames();
            for (int i = 0; i < aJIFrames.length - 1; i++) {
                try {
                    ((JInternalFrame) aJIFrames[i]).setSelected(false);
                } catch (Exception e) {
                    //JCicApp.logger.warn("No se pudo deseleccionar la JCicInternalFrame " + ((JInternalFrame) aJIFrames[i]).getTitle() + "\n\r" + e.getMessage());
                }
            }
        }
    }

    public void centerMe() {
        int widthDesktop = 0;
        int heightDesktop = 0;

        if (this.jScrollableDesktopPane != null) {
            java.awt.Rectangle rect = this.jScrollableDesktopPane.getVisibleRect();
            widthDesktop = new Double(rect.getWidth()).intValue();
            heightDesktop = new Double(rect.getHeight()).intValue();
        } else {
            java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            widthDesktop = screenSize.width;
            heightDesktop = screenSize.height;
        }

        this.setBounds((widthDesktop - this.getWidth()) / 2, (heightDesktop - this.getHeight()) / 2, this.getWidth(), this.getHeight());
    }

    public void setBounds(int x, int y, int width, int height) {
        /*if (x < 0) {
        x = 0;
        }*/
        if (y < 0) {
            y = 0;
        }
        super.setBounds(x, y, width, height);
    }

    /**
     *  Muestra la ventana
     */
    public void showJCicInternalFrame() throws Exception {
        if (jScrollableDesktopPane == null) {
            throw new Exception("El jCicScrollableDesktopPane es nulo, no se puede mostrar la JCicInternalFrame.");
        } else {
            try {
                this.jScrollableDesktopPane.add(this);
                this.setSelected(true);
                this.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void disableFrame() {
        controlFrame(false);
        blockWindowInput();

        //JCicApp.logger.debug("Se bloqueó la ventana " + this.getTitle() + ", Closable: " + this.wasClosable + ", Iconifiable: " + this.wasIconifiable + ", Maximizable: " + this.wasMaximizable + ", Focusable: " + this.wasFocusable);
    }

    public void blockWindowInput() {
        //this.jLabelBlockMouseEvents.addMouseListener(dummyMouseAdapter);
        this.jLabelBlockMouseEvents.getParent().setLayout(null);
        this.jLabelBlockMouseEvents.setBounds(0, 0, this.getWidth(), this.getHeight());
        this.jLabelBlockMouseEvents.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.jLabelBlockMouseEvents.setVisible(true);
        this.jLabelBlockMouseEvents.requestFocus();
        glasspane.setVisible(true);
    }

    public void enableFrame() {
        controlFrame(true);
        Component glasspane = this.getGlassPane();
        glasspane.setVisible(false);
        this.jLabelBlockMouseEvents.setVisible(false);
        //this.jLabelBlockMouseEvents.removeMouseListener(dummyMouseAdapter);
        this.jLabelBlockMouseEvents.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        this.setVisible(true);
        this.requestFocus();
        //JCicApp.logger.debug("Se desbloqueó la ventana " + this.getTitle() + ", Closable: " + this.wasClosable + ", Iconifiable: " + this.wasIconifiable + ", Maximizable: " + this.wasMaximizable + ", Focusable: " + this.wasFocusable);
    }

    /**
     *  Se trata
     */
    private void tryEnableWindow(MouseEvent e) {
        int enableMask = e.SHIFT_DOWN_MASK | e.CTRL_DOWN_MASK | e.ALT_DOWN_MASK | e.BUTTON3_DOWN_MASK;
        if ((e.getModifiersEx() & enableMask) == enableMask) {
            this.enableFrame();
            super.setEnabled(true);
        }
    }

    private void controlFrame(boolean activate) {

        if (this.wasClosable) {
            this.setClosable(activate);
        }
        if (this.wasIconifiable) {
            this.setIconifiable(activate);
        }
        if (this.wasMaximizable) {
            this.setMaximizable(activate);
        }
        /*if (this.wasFocusable) {
        this.setFocusable(activate);
        }*/
        this.validate();
        this.repaint();
    }

    /**
     * Getter for property centerMe.
     * @return Value of property centerMe.
     */
    public boolean isCenterMe() {
        return this.centerMe;
    }

    /**
     * Setter for property centerMe.
     * @param centerMe New value of property centerMe.
     */
    public void setCenterMe(boolean centerMe) {
        this.centerMe = centerMe;
        this.centerMe();
    }

    protected void finalize() throws Throwable {
        super.finalize();
        /*this.removeAll();
        System.gc();*/
        //System.out.println("finalize JCicInternalFrame: " + this.getTitle());
        //JCicApp.logger.debug("finalize JCicInternalFrame: " + this.getTitle());
    }
    /*public void dispose() {
    super.dispose();
    this.removeAll();
    this.jCicScrollableDesktopPane.remove(this);
    System.gc();
    }*/
}